from __future__ import annotations

from maze import Maze
from strategy_bfs import bfs
from strategy_dfs import dfs
from strategy_dijkstra import dijkstra
from strategy_random import random

graph01 = [
    ["1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "2", "1", "#", "1", "1", "1", "1"],
    ["1", "#", "2", "1", "1", "#", "1", "1"],
    ["1", "1", "1", "8", "8", "1", "1", "1"],
    ["S", "1", "#", "8", "#", "1", "1", "G"],
    ["1", "1", "1", "1", "#", "2", "#", "1"],
    ["1", "1", "1", "1", "1", "1", "2", "1"],
    ["1", "#", "1", "1", "1", "#", "2", "1"],
]

graph02 = [
    ["1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "1", "1", "1", "1", "#", "#", "1"],
    ["1", "1", "1", "1", "8", "8", "#", "1"],
    ["S", "#", "#", "1", "1", "8", "#", "G"],
    ["9", "#", "#", "1", "1", "1", "#", "1"],
    ["1", "1", "1", "1", "1", "1", "#", "1"],
    ["1", "#", "#", "#", "#", "#", "#", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1"],
]

graph03 = [
    ["1", "1", "1", "1", "1", "1", "1", "1"],
    ["1", "#", "#", "#", "#", "1", "1", "1"],
    ["1", "#", "1", "1", "#", "1", "#", "1"],
    ["1", "#", "S", "1", "#", "1", "#", "G"],
    ["1", "#", "1", "1", "#", "1", "#", "1"],
    ["1", "#", "1", "1", "1", "1", "#", "1"],
    ["1", "#", "#", "#", "#", "#", "#", "1"],
    ["1", "1", "1", "1", "1", "1", "1", "1"],
]

graph04 = [
    ["1", "1", "1", "1", "#", "1", "#", "1", "1", "1", "1", "#", "1", "1", "9"],
    ["1", "#", "#", "1", "1", "1", "1", "1", "#", "1", "1", "#", "1", "1", "1"],
    ["1", "1", "#", "1", "#", "#", "#", "#", "#", "#", "1", "1", "1", "8", "G"],
    ["1", "1", "#", "1", "1", "1", "1", "1", "1", "#", "#", "1", "#", "#", "#"],
    ["7", "1", "#", "#", "#", "#", "#", "#", "1", "1", "#", "1", "2", "1", "4"],
    ["6", "1", "1", "1", "1", "3", "#", "8", "1", "#", "#", "4", "3", "2", "1"],
    ["5", "1", "1", "4", "1", "1", "#", "8", "1", "#", "1", "#", "#", "#", "1"],
    ["1", "#", "#", "#", "#", "1", "8", "8", "#", "#", "1", "1", "1", "2", "1"],
    ["1", "#", "1", "1", "#", "1", "#", "8", "1", "#", "1", "1", "1", "1", "1"],
    ["1", "#", "1", "1", "#", "1", "#", "#", "1", "#", "1", "#", "#", "#", "#"],
    ["1", "#", "1", "1", "#", "1", "#", "1", "1", "#", "1", "1", "1", "1", "1"],
    ["8", "#", "2", "1", "1", "1", "#", "1", "1", "#", "1", "1", "1", "1", "1"],
    ["8", "#", "3", "#", "#", "#", "#", "1", "1", "#", "1", "1", "1", "1", "1"],
    ["8", "#", "4", "#", "1", "1", "1", "2", "2", "#", "#", "#", "#", "4", "1"],
    ["S", "1", "1", "1", "1", "1", "1", "#", "1", "1", "1", "1", "1", "1", "1"],
]

graph05 = [
    ["S", "1", "#", "3", "G"],
    ["#", "1", "#", "1", "5"],
    ["1", "1", "#", "9", "3"],
    ["1", "#", "3", "1", "1"],
    ["1", "1", "1", "8", "2"],
]
if __name__ == "__main__":

    m1 = Maze(graph01)
    m2 = Maze(graph02)
    m3 = Maze(graph03)
    m4 = Maze(graph04)
    m5 = Maze(graph05)

    for m in (m4, ):
        results = [
            m.heat_map(m.solve(dfs), title="DFS"),
            m.heat_map(m.solve(bfs), title="BFS"),
            m.heat_map(m.solve(random), title="Random"),
            m.heat_map(m.solve(dijkstra), title="Dijkstra")
        ]

        for index in range(len(results[0])):
            print(
                "   ".join(
                    [
                        results[0][index],
                        results[1][index],
                        results[2][index],
                        results[3][index],
                    ]
                )
            )

